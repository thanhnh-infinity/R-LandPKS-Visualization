{
    "contents" : "# server.R\nsource('helpers.R')\nlibrary(shiny)\nlibrary(googleVis)\n\n\nshinyServer(function(input, output,session) {\n  first<<- TRUE\n  \n  \n##https://landpotential.shinyapps.io/LandCoverCharts/?userName=dwkimiti@gmail.com\n\n  output$PlotNames <- renderUI({\n    \n    searchStr = parseQueryString(session$clientData$url_search)\n#     print(searchStr[\"userName\"])\n    shiny::validate(\n      need(\"userName\" %in% names(searchStr) ,'No data to display!')\n      ,\n      need(searchStr[\"userName\"] != \"\" ,'No data to display!')\n    )\n    \n    prepareData(searchStr[\"userName\"])\n    \n    checkboxGroupInput(\"checkGroup\", \n                       label = h5(\"Plot list:\"), \n                       choices = plotNames ,\n                       selected = plotNames[1])\n  })\n  \n\n  observe({\n    if (input$selectAll){\n      \n      updateCheckboxGroupInput( session, \"checkGroup\", \n                                choices = plotNames ,\n                                selected = plotNames) \n      first <<- FALSE\n    }\n  })\n    \n    observe({\n    if(input$deselectAll)\n      {\n       updateCheckboxGroupInput( session, \"checkGroup\", \n                                 choices = plotNames ,\n                                 selected = NULL  ) \n      }\n\n  })\n  \n\n  \n  output$chart1 <- renderGvis({\n    \n    shiny::validate(need(input$checkGroup, 'Check at least one plot!' ))    \n    \n    \n    switch(input$charts, \n           \"Height class multi bar chart\" = heightChart(),\n           \"Gap percentage chart\" = gapChart(),\n           \"Cover/Bare ground chart\" = coverageChart(), \n           \"Species Density chart\"= speciesChart(),\n           \"Plant Cover/Composition multi bar chart\" = plantCoverChart(),\n           \"Foliar Cover chart\" = foliarChart(),\n           \"test combined chart\" = testChart()\n    )\n  })\n  \n  output$summary<- renderText ({\n   \n    switch(input$charts, \n           \"Height class multi bar chart\" = \"This chart displays different height classes for each plot.\",\n           \"Gap percentage chart\" = \"This chart displays different Gap types for each plot.\",\n           \"Cover/Bare ground chart\" = \"This chart shows Bare ground and cover percentage for each plot.\", \n           \"Species Density chart\"= \"Species Density is represented in this chart.\",\n           \"Plant Cover/Composition multi bar chart\" = \"this is Plant Cover/Composition multi bar chart\",\n           \"Foliar Cover chart\" = \"this is Foliar Cover chart\",\n           \"test combined chart\" = \"this is test combined chart\"\n    )   \n    \n  }) \n  \n  heightChart <- function() {\n    \n    heightData<-getHeight(input$checkGroup)\n    p <- gvisComboChart(heightData, xvar = \"plotNames\" , yvar = c(\"<10cm\", \"10-50cm\", \"50cm-1m\", \"1-2m\", \"2-3m\", \">3m\"), options = list(seriesType = \"bars\",                                                                                       title = \"Height class\", series = \"\"))\n    \n  }\n  \n  plantCoverChart<- function(){\n    plantCoverData<-getPlantCover(input$checkGroup)\n    p <- gvisComboChart(plantCoverData, xvar = \"plotNames\", yvar = c(\"trees_total\",\"shrubs_total\",  \"sub_shrubs_total\",  \"perennial_grasses_total\",  \"annuals_total\"), options = list(seriesType = \"bars\", \n                                                                                            title = \"Plant Cover class\", series = \"\"))\n    \n  }\n  \n  gapChart <- function() {\n    data<-getGap(input$checkGroup)\n    p <- gvisComboChart(data, xvar = \"plotNames\", yvar = c(\"Canopy gap%\", \"Basal gap %\") , options = list(seriesType = \"bars\", \n                                                                                                          title = \"Gap percentage\", series = \"\"))\n    \n  }\n  coverageChart <- function() {\n    data<-getCoverage(input$checkGroup)\n    p <- gvisComboChart(data, xvar = \"plotNames\", yvar = c(\"Bare Ground%\", \"Cover%\") , options = list(seriesType = \"bars\", \n                                                                                                          title = \"Cover/Bare ground percentage\", series = \"\", colors=\"[ '#FF0000' , '#009000']\"))\n    \n  }\n  speciesChart <- function() {\n    data<-getSpecies(input$checkGroup)\n    p <- gvisComboChart(data, xvar = \"plotNames\", yvar = c(\"Species 1\", \n                                                           \"Species 2\") , options = list(seriesType = \"bars\", \n                                                                                         title = \"Species\", series = \"\"))\n    \n  }\n  \n  foliarChart <- function() {\n    data<-getFoliar(input$checkGroup)\n    p <- gvisColumnChart(data,yvar = \"Foliar Cover\" , xvar = \"plotNames\", options =list(title = \"Foliar cover percentage\"))\n#     data<-data[c(2,1)]\n#    Gauge <-  gvisGauge(data,labelvar  = \"plotNames\", numvar = \"Foliar Cover\", options=list(min=0, max=100, greenFrom=66,\n#                                                     greenTo=100, yellowFrom=33, yellowTo=66,\n#                                                     redFrom=0, redTo=33, width=700, height=500))\n#    \n   \n  }\n  \n  \n  testChart<-function(){\n    \n    testData<-merge(getGap(input$checkGroup),getFoliar(input$checkGroup),by = \"plotNames\")\n    p <- gvisBubbleChart(testData, idvar=\"plotNames\", \n                              xvar=\"Canopy gap%\", yvar=\"Basal gap %\",\n                               sizevar=\"Foliar Cover\",\n                         options=list(\n                           hAxis='{minValue:0, maxValue:110, title:\"Canopy Gap\"}',\n                           vAxis= '{minValue:0, maxValue:110, title: \"Basal Gap\"}',\n                           colorAxis='{minValue:0, legend:\"Foliar Cover\"}'\n                           ))\n  }\n  \n}) \n",
    "created" : 1450492474126.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "426194096",
    "id" : "40ABF9D5",
    "lastKnownWriteTime" : 1450492447,
    "path" : "/Volumes/Develop_Data_MacOS/All_Workspace/R_Workspace/Visualization_LandCoverCharts/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}