{
    "contents" : "library(RCurl)\nlibrary(jsonlite)\nlibrary(googleVis)\nlibrary(httr)\nlibrary(shiny)\nlibrary(plyr)\n\n\nsource('Auth.R')#contains key and secret\n\n\n\n# 1. Find OAuth settings for google:\n#    https://developers.google.com/accounts/docs/OAuth2InstalledApp\noauth_endpoints(\"google\")\n\n# 2. Register an application at https://cloud.google.com/console#/project\nmyapp <- oauth_app(\"google\",\n                   key = myKey,\n                   secret = mySecret)\n\n\n# 3. Get OAuth credentials\ngoogle_token <- oauth2.0_token(oauth_endpoints(\"google\"), myapp,\n                               scope = c(\"https://www.googleapis.com/auth/userinfo.profile\",\"https://www.googleapis.com/auth/userinfo.email\"))\n\n\n\n## Height class names\nhClasses <<- c(\"<10cm\", \"10-50cm\", \"50cm-1m\", \"1-2m\", \"2-3m\", \">3m\")\ncoverClasses<<- c(\"trees_total\",\"shrubs_total\",  \"sub_shrubs_total\",  \"perennial_grasses_total\",\t\"annuals_total\")\nfoliarList<-c(\"Trees\", \"Shrubs\", \"Sub-shrubs\", \"Perennial grasses\", \"Annuals\")\n\nplotNames <<- list()\n\ndata <- data.frame()\n\n\n## this method buils the structure of the data\nBuildDataFrame <- function() {\n  \n  ## count of plots\n  plotCount <- length(plotNames)\n  \n  ## build new data frame\n  formattedData <- data.frame(matrix(ncol = plotCount, nrow = 23))\n  \n  ## prepare list of properties\n  propertyList = c(\"Bare Ground%\", \"Cover%\", \"\", \"Canopy gap%\", \"Basal gap %\", \n                   \" \", \"Species 1\", \"Species 2\", \n                   \"Height.class\", \"<10cm\", \"10-50cm\", \"50cm-1m\", \"1-2m\", \"2-3m\", \">3m\" , \n                   \"Plant Cover/Composition\",\"trees_total\",\"shrubs_total\",  \"sub_shrubs_total\",\t\"perennial_grasses_total\",\t\"annuals_total\",\n                   \"  \",\"Foliar Cover\")\n  \n  # set the property names\n  row.names(formattedData) <- propertyList\n  \n  \n  # set plotnames to columns\n  colnames(formattedData)[1:plotCount] <- plotNames\n  \n  return(formattedData)\n}\n\n## This method fills the data into data frame\n\nfillDataFrame <- function(df) {\n  \n  \n  for (plot in plotNames) {\n    ## fill bare ground data\n    df[\"Bare Ground%\", plot] = sum(subset(data, subset = (name == plot), \n                                          select = stick_segment_1:stick_segment_5) == \"Bare\")\n    df[\"Cover%\", plot] = sum(subset(data, subset = (name == plot), \n                                        select = stick_segment_1:stick_segment_5) != \"Bare\")\n    \n    ## fill species data\n    df[\"Species 1\", plot] = sum(subset(data, \n                                       subset = (name == plot))$species_1_density)/20\n    df[\"Species 2\", plot] = sum(subset(data, \n                                       subset = (name == plot))$species_2_density)/20\n    \n    ## fill gap data\n    df[\"Canopy gap%\", plot] = as.numeric( nrow(subset(data, subset = (as.logical(canopy_gap) & \n                                                                        name == plot)))/20 * 100)\n    df[\"Basal gap %\", plot] = as.numeric(nrow(subset(data, subset = (as.logical(basal_gap) & \n                                                                       name == plot)))/20 * 100)\n    \n    ## fill height class values\n    for (class in hClasses) {\n      df[class, plot] = nrow(subset(data, subset = (canopy_height == \n                                                      class & name == plot)))/20 * 100\n    }\n    \n    ##formula 4\n    sumPlantCover = sum(subset(data, subset = (name == plot),select = trees_total:annuals_total))\n\n    for (class in coverClasses) {\n      df[class, plot] = round(sum(subset(data, subset = (name == plot),select = class))/sumPlantCover * 100)\n    }\n    \n    ## formula 3\n    df[\"Foliar Cover\", plot] = sumFunc(subset(data, subset = (name == plot), \n                                               select = stick_segment_1:stick_segment_5))\n  \n  }\n  return(df)\n}\n\n\n##This method will convert data to a compatible version for scatter plot\ntransformData<-function(df)\n{\n  #Transpose the data\n  result<-as.data.frame(t(df))\n  \n  #add a new column with plot names\n  result<-cbind(result,plotNames= rownames(result))\n  \n  #Delete row names\n  rownames(result)<-NULL\n  \n  #Delete the row with was column names\n  result<-result[-which(grepl(\"names\",result$plotNames)),]\n   \n  return (result)\n}\n\nconvertToNumeric<-function(data){\n  #convert two percentage columns to numeric\n  \n  for(col in names(data))\n  {\n    if(col !=\"plotNames\")\n    {\n      data[,col]<- as.numeric(as.character(data[,col]))\n    }\n  }\n  return (data)\n}\n\n#returns coverage data\ngetCoverage<-function(input)\n{\n  coverageData <- data[c(\"Bare Ground%\", \"Cover%\"), ]\n  coverageData<-convertToNumeric(transformData(coverageData))\n  coverageData<-coverageData[coverageData$plotNames %in% input,]\n  return (coverageData)\n}\n\n\n#returns gap data\ngetGap<-function(input)\n{\n  gapData <- data[c(\"Canopy gap%\", \"Basal gap %\"), ]\n  gapData<-convertToNumeric(transformData(gapData))\n  gapData<-gapData[gapData$plotNames %in% input,]\n  return (gapData)\n \n}\n\n#returns height class data\ngetHeight<-function(input)\n{\n  heightData <- data[hClasses, ]\n  heightData<-convertToNumeric(transformData(heightData))\n  heightData<-heightData[heightData$plotNames %in% input,]\n  return (heightData)\n  \n}\n\n#returns plant cover data\ngetPlantCover<-function(input)\n{\n  plantCoverData <- data[coverClasses, ]\n  plantCoverData<-convertToNumeric(transformData(plantCoverData))\n  plantCoverData<-plantCoverData[plantCoverData$plotNames %in% input,]\n  return (plantCoverData)\n  \n}\n\n#returns species data\ngetSpecies<-function(input)\n{\n  speciesData <- data[c(\"Species 1\", \n                        \"Species 2\"), ]\n  \n  speciesData<-convertToNumeric(transformData(speciesData))\n  speciesData<-speciesData[speciesData$plotNames %in% input,]\n  return (speciesData)\n  \n}\n\n# #returns Foliar Cover data\ngetFoliar<-function(input)\n{\n  foliarData<<- data[\"Foliar Cover\", ]\n  foliarData<-convertToNumeric(transformData(foliarData))\n  foliarData<-foliarData[plotNames %in% input,]\n  \n  return (foliarData)  \n}\n\n#Formula 3\ncountFunc<-function(x)\n{\n  x<-as.character(x)\n  x<-gsub(\" \",\"\",x)\n  if(length(intersect(strsplit(x,\",\")[[1]] , foliarList))>0)\n  {\n    return (1)\n  }\n  else\n  {\n    return (0)\n  }\n}\n\nsumFunc<-function(df)\n{\n  return(\n      sum(apply(df[1],1,countFunc))+\n      sum(apply(df[2],1,countFunc))+\n      sum(apply(df[3],1,countFunc))+\n      sum(apply(df[4],1,countFunc))+\n      sum(apply(df[5],1,countFunc))\n  )\n}\n\n\n###########################\n### returns the column value in df and null if not included\ngetColumn<-function(df, colname){\n  if(colname %in% names(df)){\n    return (df[,colname])\n  } else {\n    return (\"\")\n  }\n}\n\n\n\n#############################\n##reads the landCover data from GAE and return in format\ngetCoverData<-function(userName,items){\n  \n  result <<-  data.frame(matrix(ncol = 48, nrow = 0))\n  \n  colnames(result) <- c(\"name\", \"date\", \n                        \"dominant_woody_species\",\"dominant_nonwoody_species\",\n                        \"transect\",  \"segment\"  ,\"canopy_height\",\t\"canopy_gap\",\t\"basal_gap\",\t\n                        \"stick_segment_1\",\"stick_segment_2\",\t\"stick_segment_3\",\t\"stick_segment_4\",\t\"stick_segment_5\",\n                        \"bare_total\",  \"trees_total\",\t\"shrubs_total\",\t\"sub_shrubs_total\",\t\"perennial_grasses_total\",\t\"annuals_total\"\t,\"herb_litter_total\",\t\"wood_litter_total\",\t\"rock_total\",\n                        \"plot_total_cover\",  \"plot_total_bare_ground\",\t\"plot_total_foliar_cover\",\n                        \"plot_total_plant_cover/composition_tree\",\t\"plot_total_plant_cover/composition_shrub\",\t\"plot_total_plant_cover/composition_sub_shrub\",\t\"plot_total_plant_cover/composition_perennial_grasses\",\t\"plot_total_plant_cover/composition_annuals\",\"plot_total_plant_cover/composition_herb_litter\",\t\"plot_total_plant_cover/composition_wood_litter\",\t\"plot_total_plant_cover/composition_rock\"\t,\n                        \"plot_total_canopy_height_smaller_10_cm\",\t\"plot_total_canopy_height_10_50_cm\",\t\"plot_total_canopy_height_50cm_1m\",\t\"plot_total_canopy_height_1m_2m\",\t\"plot_total_canopy_height_2m_3m\",\t\"plot_total_canopy_height_greater_3m\"\t,\n                        \"plot_total_canopy_gap_percentage\"\t,\"plot_total_basal_gap_percentage\",\n                        \"species_of_interest_1\", \"species_of_interest_1_count\", \"species_of_interest_1_density\",\n                        \"species_of_interest_2\", \"species_of_interest_2_count\", \"species_of_interest_2_density\"\n  )\n  \n  coverList<- c(\"Bare\",\"Trees\",\"Shrubs\",\"Sub-shrubs\",\"Perennial grasses\",\"Annuals\",\"Herb litter\",\"Wood litter\",\"Rock\")\n  \n  for(i in 1:nrow(items)){ \n    item<- items[i,]\n    name = gsub(paste0(userName,\"-\"),\"\",item[\"siteID\"])\n    recorder_name = userName\n    transect = item[\"direction\"]\n    \n    dominant_woody_species  = getColumn(item, \"dominantWoodySpecies\")\n    dominant_nonwoody_species= getColumn(item, \"dominantNonwoodySpecies\")    \n    \n    speciesOfInterest1 = getColumn(item, \"speciesOfInterest1\")\n    speciesOfInterest2 = getColumn(item, \"speciesOfInterest2\")\n    \n    segments<- as.data.frame(item$segments)\n    \n    for( j in 1:nrow(segments)){\n      segment <- segments[j,]   \n      rowNo <- j +(i-1)*5\n      \n      result[rowNo,\"name\"] <- name\n      result[rowNo,\"date\"] = getColumn(segment,\"date\")\n      \n      result[rowNo,\"dominant_woody_species\"] = dominant_woody_species  \n      result[rowNo,\"dominant_nonwoody_species\"] = dominant_nonwoody_species\n      \n      result[rowNo,\"transect\"]<- transect\n      \n      result[rowNo,\"segment\"] = getColumn(segment,\"range\")\n      \n      result[rowNo,\"canopy_height\"] = getColumn(segment,\"canopyHeight\")\n      result[rowNo,\"canopy_gap\"] = getColumn(segment,\"canopyGap\")\n      result[rowNo,\"basal_gap\"] = getColumn(segment,\"basalGap\")\n      \n      result[rowNo,\"stick_segment_1\"] = paste(coverList [unlist(segment$stickSegments[[1]]$covers[1])],collapse = \", \")\n      result[rowNo,\"stick_segment_2\"] = paste(coverList [unlist(segment$stickSegments[[1]]$covers[2])],collapse = \", \")\n      result[rowNo,\"stick_segment_3\"] = paste(coverList [unlist(segment$stickSegments[[1]]$covers[3])],collapse = \", \")\n      result[rowNo,\"stick_segment_4\"] = paste(coverList [unlist(segment$stickSegments[[1]]$covers[4])],collapse = \", \")\n      result[rowNo,\"stick_segment_5\"] = paste(coverList [unlist(segment$stickSegments[[1]]$covers[5])],collapse = \", \")\n      \n      \n      covers <-  do.call(rbind,segment$stickSegments[[1]]$covers)\n      \n      result[rowNo,\"bare_total\"] <- length(covers[covers[,1]==TRUE,1])\n      result[rowNo,\"trees_total\"]<- length(covers[covers[,2]==TRUE,2])\n      result[rowNo,\"shrubs_total\"]<- length(covers[covers[,3]==TRUE,3])\n      result[rowNo,\"sub_shrubs_total\"]<- length(covers[covers[,4]==TRUE,4])\n      result[rowNo,\"perennial_grasses_total\"]<- length(covers[covers[,5]==TRUE,5])\n      result[rowNo,\"annuals_total\"]<- length(covers[covers[,6]==TRUE,6])\n      result[rowNo,\"herb_litter_total\"] <- length(covers[covers[,7]==TRUE,7])\n      result[rowNo,\"wood_litter_total\"]<- length(covers[covers[,8]==TRUE,8])\n      result[rowNo,\"rock_total\"]<- length(covers[covers[,9]==TRUE,9])\n      \n      \n      result[rowNo,\"species_of_interest_1\"] = speciesOfInterest1\n      result[rowNo,\"species_of_interest_1_count\"] = getColumn(segment,\"speciesOfInterest1Count\")\n      result[rowNo,\"species_of_interest_1_density\"] = getColumn(segment,\"species1Density\")\n      \n      result[rowNo,\"species_of_interest_2\"] = speciesOfInterest2\n      result[rowNo,\"species_of_interest_2_count\"] = getColumn(segment,\"speciesOfInterest2Count\")\n      result[rowNo,\"species_of_interest_2_density\"] = getColumn(segment,\"species2Density\")\n      \n    }\n  } \n  \n  return (result)\n  \n}\n\n\n\n#Reads land cover data for recorder name\n#############################\ngetLandCoverData<- function(recorder){\n  \n\n  recorderRep <- sub(\"@\", \"%40\", recorder)\n  \n  request <- GET(paste0(\"https://silicon-bivouac-496.appspot.com/_ah/api/transectendpoint/v1/transect?otherUser=\",recorderRep),\n                 config(token = google_token))\n  stop_for_status(request)\n  cover_data<-content(request,as = \"text\")\n  \n  cover_data <- fromJSON(cover_data)\n  cover_data <- cover_data$items\n  \n  if(is.null(cover_data))\n  {\n    return (NULL)\n  }\n  \n  cover_data<- getCoverData(recorder,cover_data)\n  \n  print(paste(recorder,nrow(cover_data),\"*****\",ncol(cover_data)))\n  \n\n  return (cover_data)\n  \n}\n\n\n############ unlist a list column and paste with a comma\nunlistCol<- function(col){\n  df <- NULL\n  \n  for(i in 1:rowCount){\n    if(! is.null(col[i]))\n    {\n      df[i]<- paste(unlist(col[i]),collapse = \", \")\n    }\n  }\n  return (df)\n}\n\n\n#reads list of plots from GAE\n###################################\ngetPlotListData<-function(){\n  # 4. Use API\n  req <- GET(\"https://silicon-bivouac-496.appspot.com/_ah/api/plotendpoint/v1/plot?allUsers=true\",\n             config(token = google_token))\n  stop_for_status(req)\n  json_data<-content(req,as = \"text\")\n  \n  json_data <- fromJSON(json_data)\n  json_data <- json_data$items\n  \n  rowCount <<- nrow(json_data)\n  \n  csv_data <- subset(json_data, select = c(\n    name,recorderName))\n  \n  \n  colnames(csv_data) <- c(\"name\",\"recName\")\n  \n  return (csv_data)\n}\n\n\n\n##get the data frame for landCover\ngetData<-function(recorder){\n  \n  if(recorder ==\"all\"){\n    plotData <-getPlotListData()\n    recorder<-  unique(plotData$recName)\n  }\n  \n  coverData <- NULL\n  for(rec in recorder){\n    \n    data <- getLandCoverData(rec)\n    \n    if(!is.null(data)){\n      \n      if(is.null (coverData )){\n        \n        coverData = data\n      }\n      else\n        coverData <- rbind.fill(data,coverData)\n      \n    }\n  }\n\n  return (coverData)\n  \n}\nprepareData<-function(recorder )\n{ \n\n  \n  data<<-getData(recorder)\n  if( is.null(data) || nrow(data) ==0) \n  {\n    stop(\"There is no LandCover data for this user to display!\")\n  }\n  ## extract plot names\n  plotNames <<- levels(factor(data, levels = unique(data$name)))\n  \n  data <<- fillDataFrame(BuildDataFrame())\n  \n  data$names <<- rownames(data)\n    \n  \n}\n\n\n",
    "created" : 1450492469881.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2891748201",
    "id" : "F3A2D64F",
    "lastKnownWriteTime" : 1450492433,
    "path" : "/Volumes/Develop_Data_MacOS/All_Workspace/R_Workspace/Visualization_LandCoverCharts/helpers.R",
    "project_path" : "helpers.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}